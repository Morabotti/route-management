/*
 * This file is generated by jOOQ.
 */
package fi.morabotti.routemanagement.db;


import fi.morabotti.routemanagement.db.tables.Location;
import fi.morabotti.routemanagement.db.tables.Person;
import fi.morabotti.routemanagement.db.tables.PrimaryLocation;
import fi.morabotti.routemanagement.db.tables.Route;
import fi.morabotti.routemanagement.db.tables.Step;
import fi.morabotti.routemanagement.db.tables.StepItem;
import fi.morabotti.routemanagement.db.tables.Vehicle;
import fi.morabotti.routemanagement.db.tables.records.LocationRecord;
import fi.morabotti.routemanagement.db.tables.records.PersonRecord;
import fi.morabotti.routemanagement.db.tables.records.PrimaryLocationRecord;
import fi.morabotti.routemanagement.db.tables.records.RouteRecord;
import fi.morabotti.routemanagement.db.tables.records.StepItemRecord;
import fi.morabotti.routemanagement.db.tables.records.StepRecord;
import fi.morabotti.routemanagement.db.tables.records.VehicleRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<LocationRecord> KEY_LOCATION_ID = Internal.createUniqueKey(Location.LOCATION, DSL.name("KEY_location_id"), new TableField[] { Location.LOCATION.ID }, true);
    public static final UniqueKey<PersonRecord> KEY_PERSON_ID = Internal.createUniqueKey(Person.PERSON, DSL.name("KEY_person_id"), new TableField[] { Person.PERSON.ID }, true);
    public static final UniqueKey<PersonRecord> KEY_PERSON_NAME = Internal.createUniqueKey(Person.PERSON, DSL.name("KEY_person_name"), new TableField[] { Person.PERSON.NAME }, true);
    public static final UniqueKey<PrimaryLocationRecord> KEY_PRIMARY_LOCATION_ID = Internal.createUniqueKey(PrimaryLocation.PRIMARY_LOCATION, DSL.name("KEY_primary_location_id"), new TableField[] { PrimaryLocation.PRIMARY_LOCATION.ID }, true);
    public static final UniqueKey<RouteRecord> KEY_ROUTE_ID = Internal.createUniqueKey(Route.ROUTE, DSL.name("KEY_route_id"), new TableField[] { Route.ROUTE.ID }, true);
    public static final UniqueKey<StepRecord> KEY_STEP_ID = Internal.createUniqueKey(Step.STEP, DSL.name("KEY_step_id"), new TableField[] { Step.STEP.ID }, true);
    public static final UniqueKey<StepItemRecord> KEY_STEP_ITEM_ID = Internal.createUniqueKey(StepItem.STEP_ITEM, DSL.name("KEY_step_item_id"), new TableField[] { StepItem.STEP_ITEM.ID }, true);
    public static final UniqueKey<VehicleRecord> KEY_VEHICLE_ID = Internal.createUniqueKey(Vehicle.VEHICLE, DSL.name("KEY_vehicle_id"), new TableField[] { Vehicle.VEHICLE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PrimaryLocationRecord, LocationRecord> FK_PRIMARY_LOCATION_LOCATION = Internal.createForeignKey(PrimaryLocation.PRIMARY_LOCATION, DSL.name("fk_primary_location_location"), new TableField[] { PrimaryLocation.PRIMARY_LOCATION.LOCATION_ID }, Keys.KEY_LOCATION_ID, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<PrimaryLocationRecord, PersonRecord> FK_PRIMARY_LOCATION_PERSON = Internal.createForeignKey(PrimaryLocation.PRIMARY_LOCATION, DSL.name("fk_primary_location_person"), new TableField[] { PrimaryLocation.PRIMARY_LOCATION.PERSON_ID }, Keys.KEY_PERSON_ID, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<RouteRecord, LocationRecord> FK_ROUTE_LOCATION = Internal.createForeignKey(Route.ROUTE, DSL.name("fk_route_location"), new TableField[] { Route.ROUTE.DESTINATION_ID }, Keys.KEY_LOCATION_ID, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<RouteRecord, VehicleRecord> FK_ROUTE_VEHICLE = Internal.createForeignKey(Route.ROUTE, DSL.name("fk_route_vehicle"), new TableField[] { Route.ROUTE.VEHICLE_ID }, Keys.KEY_VEHICLE_ID, new TableField[] { Vehicle.VEHICLE.ID }, true);
    public static final ForeignKey<StepRecord, LocationRecord> FK_STEP_LOCATION = Internal.createForeignKey(Step.STEP, DSL.name("fk_step_location"), new TableField[] { Step.STEP.LOCATION_ID }, Keys.KEY_LOCATION_ID, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<StepRecord, RouteRecord> FK_STEP_ROUTE = Internal.createForeignKey(Step.STEP, DSL.name("fk_step_route"), new TableField[] { Step.STEP.ROUTE_ID }, Keys.KEY_ROUTE_ID, new TableField[] { Route.ROUTE.ID }, true);
    public static final ForeignKey<StepItemRecord, PersonRecord> FK_STEP_ITEM_PERSON = Internal.createForeignKey(StepItem.STEP_ITEM, DSL.name("fk_step_item_person"), new TableField[] { StepItem.STEP_ITEM.PERSON_ID }, Keys.KEY_PERSON_ID, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<StepItemRecord, StepRecord> FK_STEP_ITEM_STEP = Internal.createForeignKey(StepItem.STEP_ITEM, DSL.name("fk_step_item_step"), new TableField[] { StepItem.STEP_ITEM.STEP_ID }, Keys.KEY_STEP_ID, new TableField[] { Step.STEP.ID }, true);
}
